anagrams soal hacker rank 1

soal
1. Anagrams
An anagram is a sequence of numbers that can be formed by rearranging the digits of a string. Given a string that consists of only digits, modify the first half of the string so that it is an anagram of the second half. Determine the minimum number of operations needed to complete the task.

The following is one operation:

Replace any digit in the string with any other digit (0 - 9).

Example

s = '123122'

The first half is '123' and the second half is '122'. Change the 3 in the first half to 2, resulting in '122', an anagram of the second half.
 
Function Description

Complete the function getAnagram in the editor below.

getAnagram has the following parameter:

    string s: a string of digits

Returns:

    int: the minimum number of operations needed to make the string's first half an anagram of its second half

Constraints

1 ≤ n ≤ 105

s consists of digits only.

The length of s is a multiple of 2.


Sample Case 1
Sample Input

STDIN     Function
-----     -----
786678 →  s = '786678'
 

Sample Output

0
 

Explanation

The first half, '786', is already an anagram of '678', so no operations are needed.



Sample Case 0
Sample Input

STDIN     Function
-----     -----
123456 →  s = '123456'
 

Sample Output

3
 

Explanation

The first half, '123', can be converted to '456' in 3 operations. Converting it to '465', '546', '654', etc. would also work, but in all cases, it requires 3 operations.





CODE GOLANG

package main

import (
    "fmt"
    "unicode"
)

func anagram(s string) int {
    n := len(s)
    if n < 2 {
        return 0
    }

    count1 := make([]int, 26)
    count2 := make([]int, 26)

    for i := 0; i < n/2; i++ {
        if !unicode.IsDigit(rune(s[i])) {
            return -1
        }
        count1[s[i]-'0']++
    }

    for i := n / 2; i < n; i++ {
        if !unicode.IsDigit(rune(s[i])) {
            return -1
        }
        count2[s[i]-'0']++
    }

    result := 0
    for i := 0; i < 26; i++ {
        result += abs(count1[i] - count2[i])
    }

    return result / 2
}

func abs(x int) int {
    if x < 0 {
        return -x
    }
    return x
}

func main() {
    var s string
    fmt.Scanf("%s", &s)
    res := anagram(s)
    if res == -1 {
        fmt.Println("Input string is invalid")
    } else {
        fmt.Println(res)
    }
}
